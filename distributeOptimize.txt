1. tomcat高并发调优： server.xml:    <Connector executor="tomcatThreadPool"               port="9080" protocol="HTTP/1.1"                connectionTimeout="20000"                redirectPort="8443"                 maxThreads="1000" />     catalina.sh:     JAVA_OPTS="-server -Xms2048m -Xmx8192m -Xss256k"

2. linux高并发内核调优：
系统配置主要是修改：/etc/sysctl.conf 文件，修改之后sysctl -p进行更新
参考如下：net.ipv4.tcp_max_tw_buckets = 180000#timewait 的数量，默认是180000。net.ipv4.ip_local_port_range = 1024 65000#允许系统打开的端口范围。net.ipv4.tcp_tw_recycle = 1#启用timewait 快速回收。net.ipv4.tcp_tw_reuse = 1#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接。net.ipv4.tcp_syncookies = 1#开启SYN Cookies，当出现SYN 等待队列溢出时，启用cookies 来处理。net.core.somaxconn = 32768#web 应用中listen 函数的backlog 默认会给我们内核参数的net.core.somaxconn 限制到128，而nginx 定义的NGX_LISTEN_BACKLOG 默认为511，所以有必要调整这个值。net.core.netdev_max_backlog = 32768#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。net.ipv4.tcp_max_orphans = 32768net.ipv4.tcp_max_syn_backlog = 1024#记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M 内存的系统而言，缺省值是1024，小内存的系统则是128。net.ipv4.tcp_timestamps = 0#时间戳可以避免序列号的卷绕。一个1Gbps 的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。net.ipv4.tcp_synack_retries = 2#为了打开对端的连接，内核需要发送一个SYN 并附带一个回应前面一个SYN 的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK 包的数量。net.ipv4.tcp_syn_retries = 2#在内核放弃建立连接之前发送SYN 包的数量。net.ipv4.tcp_fin_timeout = 30#net.ipv4.tcp_keepalive_time = 30#当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时。
